United Truckers Carrier DashboardThis project is a web-based dashboard for carriers to manage their information after completing an initial onboarding process. It is built with HTML, CSS, and JavaScript, and it uses Google Firebase for authentication, database (Firestore), and file storage.FeaturesSecure Login: Carriers log in with the email and password created during onboarding.Tabbed Interface: All carrier information is organized into logical sections matching the onboarding form.Data Editing: Carriers can view and update their company information, contact details, drivers, equipment, and more.Dynamic Fields: Add or remove drivers, equipment, and lane preferences on the fly.File Management: View currently uploaded documents and upload new versions (COI, W-9, etc.).Real-time Updates: All changes are saved directly to the Firestore database.Project StructureThe project consists of three main files:login.html: The login page for carriers. It handles authentication against Firebase.dashboard.html: The main dashboard page. This contains the HTML structure for the sidebar navigation and the tabbed content areas.dashboard.js: The core JavaScript logic for the dashboard. It handles:Firebase initialization and authentication state.Fetching carrier data from Firestore and populating the forms.Tab navigation logic.Handling form submissions to update data in Firestore.Managing file uploads to Firebase Storage.Setup and Deployment1. Firebase ProjectBefore you begin, you need a Firebase project set up.Go to the Firebase Console and create a new project.Authentication: Enable Email/Password as a sign-in method.Firestore: Create a Firestore database. Start in production mode. You will need to set up security rules. A basic rule to allow authenticated users to read/write their own data is:rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /carriers/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
Storage: Create a Firebase Storage bucket. The default security rules are usually sufficient to get started.2. ConfigurationOpen login.html and dashboard.js. Find the firebaseConfig object and replace its contents with the configuration object from your Firebase project settings.const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};
3. DeploymentYou can deploy these files to any static web hosting service. Firebase Hosting is an excellent and easy-to-use option.Install the Firebase CLI: npm install -g firebase-toolsLogin to Firebase: firebase loginInitialize your project folder: firebase init hostingSelect your Firebase project.Use . as your public directory (or place all files in a public folder).Configure as a single-page app (SPA): No.Deploy your files: firebase deployHow It WorksOnboarding: A carrier first signs up using your existing onboarding form. This creates an authentication entry (email/password) and a corresponding document in the carriers collection in Firestore, using the user's UID as the document ID.Login: The carrier uses the login.html page to sign in. Upon successful authentication, they are redirected to dashboard.html.Dashboard Loading: dashboard.js checks the user's authentication state. If logged in, it fetches the carrier's document from Firestore using their UID.Data Population: The fetched data is used to dynamically populate all the input fields, checkboxes, and dynamic sections (drivers, equipment, etc.) on the dashboard.Editing & Saving: When a carrier modifies information in a tab and clicks "Save Changes", the corresponding form data is collected and sent to Firestore using an updateDoc command, overwriting only the specified fields in their document. File uploads are handled separately by uploading the new file to Storage and then updating the file's URL in the Firestore document.